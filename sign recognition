import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns

test=pd.read_csv("sign_mnist_test.csv")
train=pd.read_csv("sign_mnist_train.csv")
train.head()
labels=train['label'].values
unique_val=np.array(labels)
np.unique(unique_val
plt.figure(figsize=(18,8))
sns.countplot(x=labels)

if 'label' in train.columns:
    train.drop('label', axis=1, inplace=True)

images=train.values
images=np.array([np.reshape(i,(28,28)) for i in images])
images=np.array([i.flatten() for i in images])

from sklearn.preprocessing import LabelBinarizer
label_binrizer=LabelBinarizer()
labels=label_binrizer.fit_transform(labels)
labels

index=2
print(labels[index])
plt.imshow(images[index].reshape(28,28))

import cv2
import numpy as np
import time
for i in range(0,10):
    start_time = time.time()

    rand=np.random.randint(0,len(images))
    input_im=images[rand]
    sample=input_im.reshape(28,28).astype(np.uint8)
    sample=cv2.resize(sample,None, fx=10, fy=10, interpolation=cv2.INTER_CUBIC)
    cv2.imshow("sample image",sample)
    cv2.waitKey(0)
    end_time = time.time()
    print("Time taken for this iteration:", end_time - start_time)

cv2.destroyAllWindows()

from sklearn.model_selection import train_test_split
x_train, x_test, y_train, y_test=train_test_split(images, labels, test_size=0.3, random_state=101)
from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import Dense, Conv2D, MaxPooling2D, Flatten, Dropout
batch_size = 128
num_classes = 24
epochs = 10
x_train=x_train/255
x_test=x_test/255
x_train=x_train.reshape(x_train.shape[0],28,28,1)
x_test=x_test.reshape(x_test.shape[0],28,28,1)
plt.imshow(x_train[0].reshape(28,28))

from tensorflow.keras.layers import Conv2D, MaxPooling2D
from tensorflow.keras import backend as K
from tensorflow.keras.optimizers import Adam
model =Sequential()
model.add(Conv2D(64, kernel_size=(3,3), activation = 'relu', input_shape=(28, 28,1)))
model.add(MaxPooling2D(pool_size = (2, 2)))
model.add(Conv2D(64, kernel_size=(3, 3), activation = 'relu'))
model.add(MaxPooling2D(pool_size = (2, 2)))
model.add(Conv2D(64, kernel_size=(3, 3), activation = 'relu'))
model.add(MaxPooling2D(pool_size = (2, 2)))
model.add(Flatten())
model.add(Dense (128, activation = 'relu'))
model.add(Dropout (0.20))
model.add(Dense (num_classes, activation = 'softmax'))
model.compile(loss = 'categorical_crossentropy',
              optimizer= Adam(),
              metrics=['accuracy'])

from tensorflow.keras.preprocessing.image import ImageDataGenerator

datagen = ImageDataGenerator(
    rotation_range=10,
    zoom_range=0.1,
    width_shift_range=0.1,
    height_shift_range=0.1,
    shear_range=0.1,
    horizontal_flip=False,
    fill_mode='nearest'
)
datagen.fit(x_train)

history = model.fit(datagen.flow(x_train, y_train, batch_size=batch_size),
                    validation_data=(x_test, y_test), epochs=epochs)
model.save("sign_mnist_cnn_50_Epochs.h5")
print("Model Saved")

import matplotlib.pyplot as plt
plt.plot(history.history['accuracy'])
plt.plot(history.history['val_accuracy'])
plt.title("Accuracy")
plt.xlabel('epoch')
plt.ylabel('accuracy')
plt.legend(['train','test'])
plt.show()

test_labels = test['label']
test.drop('label', axis = 1, inplace = True)
test_images = test.values
test_images = np.array([np.reshape(i, (28, 28)) for i in test_images])
test_images = np.array([i.flatten() for i in test_images])
test_labels = label_binrizer.fit_transform(test_labels)
test_images = test_images.reshape(test_images.shape[0], 28, 28, 1)
test_images.shape
y_pred = model.predict(test_images)
from sklearn.metrics import classification_report, confusion_matrix
import seaborn as sns

y_pred_classes = np.argmax(y_pred, axis=1)
y_true_classes = np.argmax(test_labels, axis=1)

print(classification_report(y_true_classes, y_pred_classes))

# Confusion Matrix
cm = confusion_matrix(y_true_classes, y_pred_classes)
plt.figure(figsize=(12, 8))
sns.heatmap(cm, annot=True, fmt='d', cmap='Blues')
plt.xlabel('Predicted')
plt.ylabel('True')
plt.show()

from sklearn.metrics import accuracy_score
accuracy_score(test_labels, y_pred.round())

def getLetter(result):
    classLabels = { 0:'A',
                    1:'B',
                    2:'C',
                    3:'D',
                    4:'E',
                    5:'F',
                    6:'G',
                    7:'H',
                    8:'I',
                    9:'J',
                    10:'K',
                    11:'L',
                    12:'M',
                    13:'N',
                    14:'O',
                    15:'P',
                    16:'Q',
                    17:'R',
                    18:'S',
                    19:'T',
                    20:'U',
                    21:'V',
                    22:'W',
                    23:'X',
                    24:'Y',
                    25:'Z'}
    try:
        res = int(result)
        return classLabels[res]
    except:
      return "Error"

cap = cv2.VideoCapture(0)
while True:
    ret, frame = cap.read()
    if not ret:
        break

    roi = frame[100:400, 320:620]
    cv2.imshow('ROI', roi)
    
    # Convert to grayscale before thresholding
    roi = cv2.cvtColor(roi, cv2.COLOR_BGR2GRAY)
    
    roi = cv2.GaussianBlur(roi, (5, 5), 0)
    roi = cv2.adaptiveThreshold(roi, 255, cv2.ADAPTIVE_THRESH_GAUSSIAN_C, cv2.THRESH_BINARY, 11, 2)
    
    cv2.imshow('Processed ROI', roi)
    
    # Resize and reshape the ROI for prediction
    roi_resized = cv2.resize(roi, (28, 28), interpolation=cv2.INTER_AREA)
    roi_resized = roi_resized.reshape(1, 28, 28, 1)

    # Predict the sign language gesture
    prediction = model.predict(roi_resized)
    confidence = np.max(prediction)
    result = str(np.argmax(prediction))

    # Display the prediction if confidence is high
    copy = frame.copy()
    cv2.rectangle(copy, (320, 100), (620, 400), (255, 0, 0), 5)
    if confidence > 0.8:
        cv2.putText(copy, getLetter(result), (300, 100), cv2.FONT_HERSHEY_COMPLEX, 2, (0, 255, 0), 2)
    else:
        cv2.putText(copy, "No sign detected", (300, 100), cv2.FONT_HERSHEY_COMPLEX, 2, (0, 0, 255), 2)
    
    cv2.imshow('Frame', copy)
    
    if cv2.waitKey(1) == 13:  # 13 is the Enter key
        break

cap.release()
cv2.destroyAllWindows()
